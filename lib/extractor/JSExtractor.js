//Extra required dependencies
const path = require('path');
const fs=require('fs'); //Getting the file system
const AdmZip = require('adm-zip');

/*============================================================================*/
/*MY FUNCTIONS - MUST BE REFACTORED AND MOVED TO ANOTHER JAVASCRIPT FILE*/
class JSExtractor {
    constructor(){
        this.directory = [];
        this.isHybridApp = false;
        this.isExtracted = false;
    }

    /*Return the whole list of directory*/
    get getterJSDirectory(){
        return this.directory;
    }

    get getterIsHybrid(){
        return this.isHybridApp;
    }

    /* Adding filename data into Directory */
    addData(filename) {
        let tempArray = []; tempArray.push(filename);
        this.directory = tempArray;
    }

    getterIsExtracted(){
        return this.isExtracted;
    }

    setterIsHybrid(cond){
        this.isHybridApp = cond;
    }

    setterIsExtracted(cond){
        this.isExtracted = cond;
    }

    /*
    * Convert APK file to ZIP file
    */
    convertApkToZip (source, target){
        let cond = true;
        fs.rename(source, target, function(err) {
            if(err)  {
                console.log('No such file or directory to be converted from APK to ZIP');
                cond=false;
            }  // Set isExtracted to True
        });
        this.setterIsExtracted(cond);
    }

    /*
    *  Extracting all zip files into targeted folder.
    *  Precondition: the source filename must be in zip
    *  @param: Source file
    *  @param: Target Directory
    */
    extractorToFolder (sourceZip, targetDir, fileType){
        let condition = false;
        if(this.getterIsExtracted()) { // If extraction is successful
            if (sourceZip.indexOf(fileType) > -1) {
                if (sourceZip) {
                    const zip = new AdmZip(sourceZip);
                    zip.extractAllTo(/*target path*/targetDir, /*overwrite*/true);
                }
                condition = true;
            }
            this.setterIsExtracted(true); // Set isExtracted to True
        }
        return condition;
    }

    /*
    * Extract Javascript from given folder and return the filename complete with its directory
    */
    getJavascriptFiles(startPath,filter,callback){
        const self = this;
        if(self.getterIsExtracted()){ // If extraction is successful
            if (!fs.existsSync(startPath)){ // If path does exist
                console.log("no dir ",startPath);
                return;
            }
            const files = fs.readdirSync(startPath);
            for(let i = 0; i < files.length; i++){
                const filename=path.join(startPath,files[i]);
                const stat = fs.lstatSync(filename);
                if (stat.isDirectory()){
                    this.getJavascriptFiles(filename,filter,callback); //recursive function
                }
                else if (filter.test(filename)) callback(filename);
            }

            this.directory.length > 0 && self.setterIsHybrid(true);
        }
    }

    /*
    * Extract APK files and put all contents into lib/extractor/data folder.
    * @param: Source APK file
    * @param: Target ZIP file
    * @param: Target directory.
    */
    extractingAPK(source, target, targetDir, fileType){
        this.convertApkToZip(source,target); //Converting from retrieved apk to zip file
        this.extractorToFolder(target,targetDir,fileType); // Extracting from converted zip file into Folder
    }


    /*
    * Deleting all files in the 'data' folder for refresh
    * @param: Directory path in String
    */
    flushDirectory(path) {
        const self = this;
        if( fs.existsSync(path) ) {
            fs.readdirSync(path).forEach(function(file) {
                const curPath = path + "/" + file;
                if(fs.statSync(curPath).isDirectory()) { // recurse
                    self.flushDirectory(curPath);
                } else { // delete file
                    fs.unlinkSync(curPath);
                }
            });
        }
    };

}

module.exports = JSExtractor;