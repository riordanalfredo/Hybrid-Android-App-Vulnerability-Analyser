//Extra required dependencies
const path = require('path');
const fs=require('fs'); //Getting the file system
const AdmZip = require('adm-zip');

/*============================================================================*/
/*MY FUNCTIONS - MUST BE REFACTORED AND MOVED TO ANOTHER JAVASCRIPT FILE*/
class JSExtractor {
    constructor(){
        this.directory = []
    }

    get returnJSDirectory(){
        return this.directory;
    }

    addData(filename) {
        this.directory.push(filename);
    }

    convertApkToZip (source, target){
        fs.rename(source, target, function(err) {
            if ( err ) console.log('ERROR: ' + err);
        });
    }

    transferZipToFolder (sourceZip, targetDir){
        if(sourceZip){
            const zip = new AdmZip(sourceZip);
            zip.extractAllTo( /*target path*/targetDir,  /*overwrite*/true);
        }
        return('Success on Transferring');
    }

    //Extract Javascript from given folder and return the filename complete with its directory
    getJavascriptFiles(startPath,filter,callback){
        if (!fs.existsSync(startPath)){
            console.log("no dir ",startPath);
            return;
        }
        const files = fs.readdirSync(startPath);
        for(let i = 0; i<files.length; i++){
            const filename=path.join(startPath,files[i]);
            const stat = fs.lstatSync(filename);
            if (stat.isDirectory()){
                this.getJavascriptFiles(filename,filter,callback); //recursive function
            }
            else if (filter.test(filename)) callback(filename);
        }
    }

    extractingAPK(source, target, targetDir){
        this.convertApkToZip(source,target); //Converting from retrieved apk to zip file
        this.transferZipToFolder(target,targetDir); // Extracting from converted zip file into Folder
    }

}

module.exports = JSExtractor;